#include <stdlib.h>
#include <stdio.h>   /* Standard input/output definitions */
#include <string.h>  /* String function definitions */
#include <unistd.h>  /* UNIX standard function definitions */
//#include <fcntl.h>   /* File control definitions */
//#include <errno.h>   /* Error number definitions */
//#include <termios.h> /* POSIX terminal control definitions */
//#include <stdlib.h>  //exit()
#include <pthread.h>
#include <ctype.h>    /* For tolower() function */
#include <math.h>

#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#include "util/type.h"
#include "util/util.h"
#include "motorboard/mot.h"
#include "udp/udp.h"
#include "controlthread_gc.h"


void diep(const char *s)
{
  perror(s);
  exit(1);
}

int main()
{
  printf("Starting \n");
  //wait for udp packet on port 7777
  udp_struct udpCmd;
  udpServer_Init(&udpCmd,7777,1/*blocking*/);

  char buf[1024];

  //if(udpServer_Init(&udpCmd,9930,0)) diep("udpServer_Init");

  
  int bufcnt=udpServer_Receive(&udpCmd, buf, 1024);
  if(bufcnt<=0) return 1;;
  buf[bufcnt]=0;
  printf("UDP wakeup received from %s\n",inet_ntoa(udpCmd.si_other.sin_addr));

  //kill program.elf
  int rc = system("/usr/bin/killall program.elf > /dev/null 2>&1");
  printf("killall program.elf -> returncode=%d  (0=killed,256=not found)\n",rc);	
  sleep(2);

  //init controller
  ctl_Init(inet_ntoa(udpCmd.si_other.sin_addr));
  printf("ctl_Init completed\n");

  char * pch;

  //main loop	
  while(1) { 
    //wait for next packet on cmd port
    bufcnt=udpServer_Receive(&udpCmd, buf, 2048);
    //printf("%d",bufcnt);

    if(bufcnt<=0) continue;
    buf[bufcnt]=0;
    
    //split tokens
    pch = strtok (buf," ,");
    float F1 = 0.0;
    float F2 = 0.0;
    float F3 = 0.0;
    float yawratet = 0.0;
    float mode = 0;  
    int countpart = 0;
    while (countpart<=4)
  	{
    		if (countpart == 0) F3 = atof(pch);
		if (countpart == 1) F1 = atof(pch);
		if (countpart == 2) F2 = atof(pch);
		if (countpart == 3) yawratet = atof(pch);
		if (countpart == 4) mode = atof(pch);
		countpart ++;
    		pch = strtok (NULL, " ,");
		
  	}
    
    if(countpart==5) {
      	//printf("xt %.3f, yt %.3f, zt %.3f, vxt %.3f, vyt %.3f, vzt %.3f, axt %.3f, ayt %.3f, azt %.3f, rollt %.3f, pitcht %.3f, yawt %.3f, rollratet %.3f, pitchratet %.3f, yawratet %.3f \n", xt,yt,zt,vxt,vyt,vzt,axt,ayt,azt,rollt,pitcht,yawt,rollratet,pitchratet,yawratet);
	//printf("mode %.3f",mode);
    	ctl_SetSetpoint(mode,F1,F2,F3,yawratet);
	//ctl_SetFeedback(x,y,z,vx,vy,vz);
	yawratet = 0;
    }

  }
  ctl_Close();
  printf("\nDone...\n");
  return 0;

}
