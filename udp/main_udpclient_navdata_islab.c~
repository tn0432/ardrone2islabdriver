#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include "udp.h"
#include "../util/type.h"
#include "../util/util.h"
#include <pthread.h>
#include <ctype.h>    /* For tolower() function */
#include <math.h>
#include "../navdata2/navdata.h"

//structure for ahrsdata
/*struct att_struct {
  float tm; //timestamp

  //pitch estimates in radians, positive is pitch down (fly forward)
  float pitch_w;  //=sum(gx * dt)
  float pitch_a;  //=pitch(az,ax)
  float pitch;    //kalman pitch estimate from gy and pitch_a

  //roll estimates in radians, positive is roll right (fly rightward)
  float roll_w;   //=sum(gy * dt)
  float roll_a;   //=roll(az,ay)
  float roll;     //kalman roll estimate from gx and roll_a
  
  //yaw estimate, positive is yaw left
  float yaw_w;      //=sum(gz * dt)
  float yaw_m;      //=sum(gz * dt)
  float yaw;      //=sum(gz * dt)
  
  double dt;  // time since last ahrsdata sample in sec
  
  //copy of physical ahrsdata values
  	double ts;  // ahrsdata timestamp in sec
  	float hraw;    // height above ground in [cm] 
  	char h_meas;// 1=height was measured in this sample, 0=height is copy of prev value
  	float ax;   // acceleration x-axis in [G] front facing up is positive         
	float ay;   // acceleration y-axis in [G] left facing up is positive                
	float az;   // acceleration z-axis in [G] top facing up is positive  
           
	float wx;   // gyro value x-axis in [rad/sec] right turn, i.e. roll right is positive           
	float wy;   // gyro value y-axis in [rad/sec] right turn, i.e. pirch down is positive                     
	float wz;   // gyro value z-axis in [rad/sec] right turn, i.e. yaw left is positive

	float magX;
	float magY; 
	float magZ;

	float pressure;

	float rotX;
	float rotY;
	float rotZ;

	float altd;

	float motor1;
	float motor2;
	float motor3;
	float motor4;
};*/

void diep(const char *s)
{
  perror(s);
  exit(1);
}

int main(void)
{
  udp_struct udp;
  /*att_struct ahrsdata;
  
  ahrsdata.tm = 0.01; //timestamp
  ahrsdata.pitch_w = 0.02;  //=sum(gx * dt)
  ahrsdata.pitch_a = 0.03;  //=pitch(az,ax)
  ahrsdata.pitch = 0.04;    //kalman pitch estimate from gy and pitch_a
  ahrsdata.roll_w = 0.05;   //=sum(gy * dt)
  ahrsdata.roll_a = 0.06;   //=roll(az,ay)
  ahrsdata.roll = 0.07;     //kalman roll estimate from gx and roll_a
  ahrsdata.yaw_w = 0.08;      //=sum(gz * dt)
  ahrsdata.yaw_m = 0.09;      //=sum(gz * dt)
  ahrsdata.yaw = 0.10;      //=sum(gz * dt)
  ahrsdata.dt = 0.11;  // time since last ahrsdata sample in sec
  ahrsdata.ts = 0.12;  // ahrsdata timestamp in sec
  ahrsdata.hraw = 0.13;    // height above ground in [cm] 
  ahrsdata.h_meas = 0.14;// 1=height was measured in this sample, 0=height is copy of prev value
  ahrsdata.ax = 0.15;   // acceleration x-axis in [G] front facing up is positive         
  ahrsdata.ay = 0.16;   // acceleration y-axis in [G] left facing up is positive                
  ahrsdata.az = 0.17;   // acceleration z-axis in [G] top facing up is positive  
  ahrsdata.wx = 0.18;   // gyro value x-axis in [rad/sec] right turn, i.e. roll right is positive           
  ahrsdata.wy = 0.19;   // gyro value y-axis in [rad/sec] right turn, i.e. pirch down is positive                     
  ahrsdata.wz = 0.20;   // gyro value z-axis in [rad/sec] right turn, i.e. yaw left is positive
  ahrsdata.magX = 0.21;
  ahrsdata.magY = 0.22; 
  ahrsdata.magZ = 0.23;
  ahrsdata.pressure = 0.24;
  ahrsdata.rotX = 0.25;
  ahrsdata.rotY = 0.26;
  ahrsdata.rotZ = 0.27;
  ahrsdata.altd = 0.28;
  ahrsdata.motor1 = 0.29;
  ahrsdata.motor2 = 0.30;
  ahrsdata.motor3 = 0.31;
  ahrsdata.motor4 = 0.32;*/

  int msglen;
  char buf[512];
  
  if(udpClient_Init(&udp,"192.168.1.2",9930)) diep("udpClient_Init");
  if(navdata_init()) printf("navdata initialized\n");
  
  while(1) { 
	navdata_update();
	msglen=sprintf(buf, (char*)" %.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f ", ahrsdata.tm,ahrsdata.pitch_w,ahrsdata.pitch_a,ahrsdata.pitch,ahrsdata.roll_w,ahrsdata.roll_a,ahrsdata.roll,ahrsdata.yaw_w,ahrsdata.yaw_m,ahrsdata.yaw,  ahrsdata.dt,ahrsdata.ts,ahrsdata.hraw,ahrsdata.h_meas,ahrsdata.ax,ahrsdata.ay,ahrsdata.az,ahrsdata.wx,ahrsdata.wy,ahrsdata.wz,ahrsdata.magX,ahrsdata.magY,
ahrsdata.magZ,ahrsdata.pressure,ahrsdata.rotX,ahrsdata.rotY,ahrsdata.rotZ,ahrsdata.altd,ahrsdata.motor1,ahrsdata.motor2,ahrsdata.motor3,ahrsdata.motor4);
        if (udpClient_Send(&udp, buf, msglen)) diep("send");
        printf(" %.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \n", ahrsdata.tm,ahrsdata.pitch_w,ahrsdata.pitch_a,ahrsdata.pitch,ahrsdata.roll_w,ahrsdata.roll_a,ahrsdata.roll,ahrsdata.yaw_w,ahrsdata.yaw_m,ahrsdata.yaw,  ahrsdata.dt,ahrsdata.ts,ahrsdata.hraw,ahrsdata.h_meas,ahrsdata.ax,ahrsdata.ay,ahrsdata.az,ahrsdata.wx,ahrsdata.wy,ahrsdata.wz,ahrsdata.magX,ahrsdata.magY,
ahrsdata.magZ,ahrsdata.pressure,ahrsdata.rotX,ahrsdata.rotY,ahrsdata.rotZ,ahrsdata.altd,ahrsdata.motor1,ahrsdata.motor2,ahrsdata.motor3,ahrsdata.motor4);
       // printf(" %.3f,%.3f,%.3f,%.3f \n", updown,frontback,leftright,yawrotate);
	//yield to other threads
	pthread_yield();
  }
  
  printf("\nDone...\n");
 
  
  udpClient_Close(&udp);
  return 0;
}
